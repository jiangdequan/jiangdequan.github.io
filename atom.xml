<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JavaHub</title>
  
  <subtitle>A Lost Programmer In The World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jiangdequan.github.io/"/>
  <updated>2020-02-06T08:11:34.542Z</updated>
  <id>https://jiangdequan.github.io/</id>
  
  <author>
    <name>Jiang Dequan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA：打造最强 IDE，教你如何集成 Tomcat！</title>
    <link href="https://jiangdequan.github.io/posts/606268cb/"/>
    <id>https://jiangdequan.github.io/posts/606268cb/</id>
    <published>2020-02-06T06:03:00.000Z</published>
    <updated>2020-02-06T08:11:34.542Z</updated>
    
    <content type="html"><![CDATA[<p>本文各项配置均基于 IntelliJ IDEA COMMUNITY 2019.3 版本（社区版足以）。  <img src="https://tvax2.sinaimg.cn/large/71d67353ly1gbmjx3qbumj20ht0b6acy.jpg" alt="idea_ic_version"></p><p>如果您使用的是社区版，会发现社区版不提供 Tomcat 的支持，那要使用 Tomcat 该怎么办呢？请接着往下看！</p><h2 id="如何通过-IDE-启动-Tomcat"><a href="#如何通过-IDE-启动-Tomcat" class="headerlink" title="如何通过 IDE 启动 Tomcat"></a>如何通过 IDE 启动 Tomcat</h2><p>在 IDEA 的设置中有个一个叫做“External Tools”的工具，我们要使用它来启动 Tomcat。  </p><ol><li><p>首先在“File -&gt; Settings -&gt; Tools -&gt; External Tools”找到该项配置 <img src="https://tvax2.sinaimg.cn/large/71d67353ly1gbmoxy41jwj20tu0k8tan.jpg" alt="idea_ic_external_tools"></p></li><li><p>点击“+”添加一个工具配置，如下图  </p><ul><li>Program：需要制定到 Tomcat 根目录下 bin/catalina.bat  </li><li>Arguments：配置 jpda run</li><li>Working direcotry：配置 Tomcat 根目录下 bin 目录即可</li><li>勾选“Open console for tool output”及其子选项<br><img src="https://tvax2.sinaimg.cn/large/71d67353ly1gbmoxyd6ijj20ds0e8dgw.jpg" alt="idea_ic_external_tools_new"></li></ul></li><li><p>指令 <strong>catalina.bat jpda run</strong> 将会在默认的端口 <em>8000</em> 以 <em>debug</em> 的方式启动 Tomcat  </p></li><li><p>现在可以通过以下任意一种方式启动 Tomcat</p><ul><li>Tools -&gt; External Tools -&gt; 选择刚创建的 External Tools 名</li><li>左侧工程 -&gt; 右键 -&gt; External Tools -&gt; 选择刚创建的 External Tools 名</li><li>任意编辑器 -&gt; 右键 -&gt; External Tools -&gt; 选择刚创建的 External Tools 名</li></ul></li></ol><h2 id="如何调试启动的-Tomcat"><a href="#如何调试启动的-Tomcat" class="headerlink" title="如何调试启动的 Tomcat"></a>如何调试启动的 Tomcat</h2><p>创建一个“Run Configuration”在 <strong>localhost:8000</strong> 启动一个远程调试会话<br><img src="https://tva2.sinaimg.cn/large/71d67353ly1gbmoxyrcllj20tz0iyac9.jpg" alt="idea_ic_run_configurations_remote"></p><p>切换到 Logs 选项卡，新增日志文件配置<br><img src="https://tva4.sinaimg.cn/large/71d67353ly1gbmoxyxx2cj20tz0iy769.jpg" alt="idea_ic_run_configurations_remote_logs"><br><img src="https://tva1.sinaimg.cn/large/71d67353ly1gbmoxz4f1qj20ae0500t4.jpg" alt="idea_ic_run_configurations_remote_logs_new"></p><p>启动该“Run Configuration”后，该调试器将会连接到 Tomcat 并在 IDE 中显示 Tomcat 的日志文件。</p><h2 id="如何通过-Maven-发布-WAR-包到-Tomcat"><a href="#如何通过-Maven-发布-WAR-包到-Tomcat" class="headerlink" title="如何通过 Maven 发布 WAR 包到 Tomcat"></a>如何通过 Maven 发布 WAR 包到 Tomcat</h2><p>首先你得通过 Maven 指令准备好 WAR 包，然后通过如下指令进行 WAR 包的拷贝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">war:war org.codehaus.mojo:wagon-maven-plugin:upload-single -Dwagon.fromFile=FULL_PATH_TO_WAR_FILE -Dwagon.url=file://FULL_PATH_TO_TOMCAT\webapps\</span><br></pre></td></tr></table></figure></p><p><strong>FULL_PATH_TO_WAR_FILE</strong>：WAR 包的路径<br><strong>FULL_PATH_TO_TOMCAT</strong>：Tomcat 的路径</p><p>我们也可以创建一个 Maven 的“Run Configuration”<br><img src="https://tva2.sinaimg.cn/large/71d67353ly1gbmoxyjna8j20tz0iy40c.jpg" alt="idea_ic_run_configurations_maven"><br><strong>Working directory：web 工程根目录</strong></p><h2 id="如何集成一个高效的插件"><a href="#如何集成一个高效的插件" class="headerlink" title="如何集成一个高效的插件"></a>如何集成一个高效的插件</h2><p>根据以上的配置，我们要调试一个应用的步骤：  </p><ul><li>执行“Create and deploy WAR to Tomcat”</li><li>执行 External Tools “Tomcat Server”</li><li>执行“Attach Tomcat8 Spring Local”</li></ul><p>是时候展现真正的技术了！！！  </p><p>我们可以通过“Run Configuration”里面的 Plugin 将上述几个工具集成一个插件<br><img src="https://tva2.sinaimg.cn/large/71d67353ly1gbmq5fp2oxj20ua0k6413.jpg" alt="idea_ic_tomcat"><br>点击“+”依次添加上述创建的工具</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://benkiew.wordpress.com/2017/06/04/idea-build-your-own-tomcat-integration-for-the-free-intellij-idea-community-edition/" target="_blank" rel="noopener">IDEA: Build your own Tomcat integration for the free IntelliJ IDEA Community Edition</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文各项配置均基于 IntelliJ IDEA COMMUNITY 2019.3 版本（社区版足以）。  &lt;img src=&quot;https://tvax2.sinaimg.cn/large/71d67353ly1gbmjx3qbumj20ht0b6acy.jpg&quot; alt=&quot;
      
    
    </summary>
    
      <category term="进阶篇" scheme="https://jiangdequan.github.io/categories/%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    
    
      <category term="工具" scheme="https://jiangdequan.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IDEA" scheme="https://jiangdequan.github.io/tags/IDEA/"/>
    
      <category term="Tomcat" scheme="https://jiangdequan.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>IDEA：打造最强 IDE，这些配置你知道吗？</title>
    <link href="https://jiangdequan.github.io/posts/377ed362/"/>
    <id>https://jiangdequan.github.io/posts/377ed362/</id>
    <published>2020-02-05T07:22:46.000Z</published>
    <updated>2020-02-06T09:41:09.289Z</updated>
    
    <content type="html"><![CDATA[<p>此处略去安装等一系列操作等，直接进入正文。<br>本文各项配置均基于 IntelliJ IDEA COMMUNITY 2019.3 版本（社区版足以）。  <img src="https://tvax2.sinaimg.cn/large/71d67353ly1gbmjx3qbumj20ht0b6acy.jpg" alt="idea_ic_version"></p><h3 id="主题调整"><a href="#主题调整" class="headerlink" title="主题调整"></a>主题调整</h3><ul><li>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; Appearance -&gt; Theme<ul><li>Atom OneDark Theme<br><img src="https://tvax3.sinaimg.cn/large/71d67353ly1gbmjx3fwb9j20tu0k8418.jpg" alt="idea_ic_theme"></li></ul></li></ul><h3 id="显示内存使用情况"><a href="#显示内存使用情况" class="headerlink" title="显示内存使用情况"></a>显示内存使用情况</h3><ul><li>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; Appearance -&gt; Window Options -&gt; 勾选“Show memory indicator”<br><img src="https://tvax2.sinaimg.cn/large/71d67353ly1gbmjx2i5r4j20tu0k8771.jpg" alt="idea_ic_memory"></li></ul><h3 id="添加打开资源管理器到工具栏"><a href="#添加打开资源管理器到工具栏" class="headerlink" title="添加打开资源管理器到工具栏"></a>添加打开资源管理器到工具栏</h3><ul><li>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; Memus and Toolbars -&gt; 点开“Main Toolbar” -&gt; 点击最后一个菜单项 -&gt; 点击“+”号 -&gt; Add Action… -&gt; 在弹出的“Choose Actions To Add”框中，打开“Other” -&gt; 拖到最后找到“Show in Explorer” -&gt; OK<br><img src="https://tva3.sinaimg.cn/large/71d67353ly1gbmjwzh9qzj20tu0k8whd.jpg" alt="idea_ic_explorer_1"><br><img src="https://tva1.sinaimg.cn/large/71d67353ly1gbmjwzqnssj20tu0k8whd.jpg" alt="idea_ic_explorer_2"><br><img src="https://tva2.sinaimg.cn/large/71d67353ly1gbmjx03e4rj209o0fv0tl.jpg" alt="idea_ic_explorer_3"></li></ul><h3 id="设置编辑器的快捷键"><a href="#设置编辑器的快捷键" class="headerlink" title="设置编辑器的快捷键"></a>设置编辑器的快捷键</h3><ul><li>File -&gt; Settings -&gt; Keymap -&gt; 根据实际情况进行选择（当然是选择“Eclipse”啦）<br><img src="https://tva1.sinaimg.cn/large/71d67353ly1gbmjx1jpndj20tu0k8mzm.jpg" alt="idea_ic_keymap"></li></ul><h3 id="使用“ctrl-鼠标滚轮”调整字体"><a href="#使用“ctrl-鼠标滚轮”调整字体" class="headerlink" title="使用“ctrl + 鼠标滚轮”调整字体"></a>使用“ctrl + 鼠标滚轮”调整字体</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Mouse -&gt; 勾选“Change font size (Zoom) with Ctrl+Mouse Wheel”<br><img src="https://tva4.sinaimg.cn/large/71d67353ly1gbmjwxoh3oj20tu0k8wh3.jpg" alt="idea_ic_change_font_mouse"></li></ul><h3 id="鼠标移动到指定类和方法上显示对应的文档"><a href="#鼠标移动到指定类和方法上显示对应的文档" class="headerlink" title="鼠标移动到指定类和方法上显示对应的文档"></a>鼠标移动到指定类和方法上显示对应的文档</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Other(拖到最后) -&gt; 勾选“Show quick documentation on mouse move”<br><img src="https://tva4.sinaimg.cn/large/71d67353ly1gbmjwyipm0j20tu0k8419.jpg" alt="idea_ic_document"></li></ul><h3 id="导包优化"><a href="#导包优化" class="headerlink" title="导包优化"></a>导包优化</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Auto Import -&gt; 勾选“Add unambiguous imports on the fly”和“Optimize imports on the fly”<br><img src="https://tva1.sinaimg.cn/large/71d67353ly1gbmjwx86dgj20tu0k876v.jpg" alt="idea_ic_auto_import"><br><strong>PS：</strong><ul><li>Add unambiguous imports on the fly：快速添加明确的导入。  </li><li>Optimize imports on the fly：快速优化导入，优化的意思即自动帮助删除无用的导入。</li></ul></li></ul><h3 id="显示行号和空白字符"><a href="#显示行号和空白字符" class="headerlink" title="显示行号和空白字符"></a>显示行号和空白字符</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Appearance -&gt; 勾选“Show line numbers”和“Show whitespaces”<br><img src="https://tvax2.sinaimg.cn/large/71d67353ly1gbmjx1toyxj20tu0k876s.jpg" alt="idea_ic_line_number_whitespace"></li></ul><h3 id="隐藏面包屑"><a href="#隐藏面包屑" class="headerlink" title="隐藏面包屑"></a>隐藏面包屑</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Breadcrumbs -&gt; 不勾选“Show breadcrumbs”<br><img src="https://tvax2.sinaimg.cn/large/71d67353ly1gbmjx2tqw7j20tu0k8mz9.jpg" alt="idea_ic_show_breadcrumbs"><br><img src="https://tvax2.sinaimg.cn/large/71d67353ly1gbmjwxdnhcj20eq01uglf.jpg" alt="idea_ic_breadcrumbs"></li></ul><h3 id="代码补全优化：忽略大小写"><a href="#代码补全优化：忽略大小写" class="headerlink" title="代码补全优化：忽略大小写"></a>代码补全优化：忽略大小写</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Code Completion -&gt; 不勾选“Match case”<br><img src="https://tva2.sinaimg.cn/large/71d67353ly1gbmjx23opoj20tu0k8772.jpg" alt="idea_ic_match_case"></li></ul><h3 id="编辑器-Tab-使用小字体"><a href="#编辑器-Tab-使用小字体" class="headerlink" title="编辑器 Tab 使用小字体"></a>编辑器 Tab 使用小字体</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Editor Tabs -&gt; 勾选“Use small font for labels”</li></ul><h3 id="编辑器-Tab-使用-标记有修改的文件"><a href="#编辑器-Tab-使用-标记有修改的文件" class="headerlink" title="编辑器 Tab 使用 * 标记有修改的文件"></a>编辑器 Tab 使用 * 标记有修改的文件</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Editor Tabs -&gt; 勾选“Mark modified (*)”</li></ul><h3 id="最近打开的编辑器-Tab-显示到最后"><a href="#最近打开的编辑器-Tab-显示到最后" class="headerlink" title="最近打开的编辑器 Tab 显示到最后"></a>最近打开的编辑器 Tab 显示到最后</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Editor Tabs -&gt; 勾选“Open new tabs at the end”</li></ul><h3 id="打开的编辑器-Tab-数量限制"><a href="#打开的编辑器-Tab-数量限制" class="headerlink" title="打开的编辑器 Tab 数量限制"></a>打开的编辑器 Tab 数量限制</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Editor Tabs -&gt; Closing Policy -&gt; 根据实际情况修改“Tab limit”的大小</li></ul><h3 id="编辑器字体调整"><a href="#编辑器字体调整" class="headerlink" title="编辑器字体调整"></a>编辑器字体调整</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; Font -&gt; 根据实际情况选择“Font”和“Fallback font”  </li><li>File -&gt; Settings -&gt; Editor -&gt; Color Scheme -&gt; Color Scheme Font -&gt; 根据实际情况选择“Font”和“Fallback font”<br><strong>PS：如果有些字体没有显示，去掉“Show only monospaced fonts”的勾</strong><br><img src="https://tva3.sinaimg.cn/large/71d67353ly1gbmjx0bstwj20tu0k8tbk.jpg" alt="idea_ic_font"><br><img src="https://tva3.sinaimg.cn/large/71d67353ly1gbmjx0l8dmj20tu0k8419.jpg" alt="idea_ic_font_color"></li></ul><h3 id="调整颜色配置"><a href="#调整颜色配置" class="headerlink" title="调整颜色配置"></a>调整颜色配置</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; Color Scheme -&gt; Scheme -&gt; 根据实际情况选择</li></ul><h3 id="默认使用空格代替-tab"><a href="#默认使用空格代替-tab" class="headerlink" title="默认使用空格代替 tab"></a>默认使用空格代替 tab</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; Code Style -&gt; Java -&gt; Tabs and Indents -&gt; 不勾选“Use tab character”<br><img src="https://tvax3.sinaimg.cn/large/71d67353ly1gbmjx353rzj20tu0k8gos.jpg" alt="idea_ic_space"></li></ul><h3 id="导包优化：导包避免使用-号"><a href="#导包优化：导包避免使用-号" class="headerlink" title="导包优化：导包避免使用 * 号"></a>导包优化：导包避免使用 * 号</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; Code Style -&gt; Java -&gt; Imports -&gt; 调整“Class count to use import with ‘*‘”和“Names count to use static import with ‘*‘”的大小<br><img src="https://tva1.sinaimg.cn/large/71d67353ly1gbmjx1b2d0j20tu0k8mzs.jpg" alt="idea_ic_import"></li></ul><h3 id="导包优化：调整导包的顺序，和-Eclipse-保持一致"><a href="#导包优化：调整导包的顺序，和-Eclipse-保持一致" class="headerlink" title="导包优化：调整导包的顺序，和 Eclipse 保持一致"></a>导包优化：调整导包的顺序，和 Eclipse 保持一致</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; Code Style -&gt; Java -&gt; Imports -&gt; Imports Layout，按如下顺序进行调整<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;blank line&gt;</span><br><span class="line">import java.*;</span><br><span class="line">&lt;blank line&gt;</span><br><span class="line">import javax.*;</span><br><span class="line">&lt;blank line&gt;</span><br><span class="line">import com.*;</span><br><span class="line">&lt;blank line&gt;</span><br><span class="line">import all other imports</span><br><span class="line">&lt;blank line&gt;</span><br><span class="line">import static all other imports</span><br><span class="line">&lt;blank line&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://tva1.sinaimg.cn/large/71d67353ly1gbmjx1b2d0j20tu0k8mzs.jpg" alt="idea_ic_import"></p><h3 id="添加创建类注释模板"><a href="#添加创建类注释模板" class="headerlink" title="添加创建类注释模板"></a>添加创建类注释模板</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates -&gt; Files -&gt; 根据实际情况调整注释模板  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright (C), 2010-$&#123;YEAR&#125;, Company Name.</span><br><span class="line"> * Created by $&#123;USER&#125; on $&#123;DATE&#125;.</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * @author $&#123;USER&#125;</span><br><span class="line"> * @date $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://tva2.sinaimg.cn/large/71d67353ly1gbmjwxzndoj20tu0k8djk.jpg" alt="idea_ic_class_comment"></p><h3 id="调整文件编码为-UTF-8"><a href="#调整文件编码为-UTF-8" class="headerlink" title="调整文件编码为 UTF-8"></a>调整文件编码为 UTF-8</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; File Encodings -&gt; 调整“Global Encoding”、“Project Encoding”、“Default encoding for properties files”的编码为 UTF-8<br><img src="https://tva4.sinaimg.cn/large/71d67353ly1gbmjwytaz0j20tu0k8goc.jpg" alt="idea_ic_encoding"></li></ul><h3 id="在左侧-Project-视图隐藏对应类型的文件"><a href="#在左侧-Project-视图隐藏对应类型的文件" class="headerlink" title="在左侧 Project 视图隐藏对应类型的文件"></a>在左侧 Project 视图隐藏对应类型的文件</h3><ul><li>File -&gt; Settings -&gt; Editor -&gt; File Types -&gt; 在“Ignore files and folders”处添加对应的类型，例如：*.iml;.classpath;.settings;.project;</li></ul><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul><li>File -&gt; Settings -&gt; Plugins<ul><li>Alibaba Java Coding Guidelines：阿里编码规约检查插件</li><li>Atom OneDark Theme：清爽的 Atom 主题插件</li><li>Background Images Plus +：背景图片插件</li><li>Maven Helper：Maven 插件</li><li>Power Mode II：炫酷的打字特效插件</li></ul></li></ul><h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h3><ul><li>File -&gt; Settings -&gt; Version Control -&gt; Git -&gt; 在“Path to Git executable”处填写 git.exe 的路径<br><img src="https://tva4.sinaimg.cn/large/71d67353ly1gbmjx0y5zsj20tu0k8ju7.jpg" alt="idea_ic_git"></li></ul><h3 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 Maven</h3><ul><li>File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven<ul><li>Maven home directory：Maven 程序根目录</li><li>User settings file：settings.xml 配置文件路径</li><li>Local repository：本地仓库路径</li></ul></li></ul><h3 id="项目自动编译"><a href="#项目自动编译" class="headerlink" title="项目自动编译"></a>项目自动编译</h3><ul><li>File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Compiler -&gt; 勾选“Build project automatically”<br><img src="https://tvax4.sinaimg.cn/large/71d67353ly1gbmjwwyr63j20tu0k80vj.jpg" alt="idea_ic_auto_build"></li></ul><h3 id="调整-Toolbar-和-Navigation-Bar"><a href="#调整-Toolbar-和-Navigation-Bar" class="headerlink" title="调整 Toolbar 和 Navigation Bar"></a>调整 Toolbar 和 Navigation Bar</h3><ul><li>View -&gt; Appearance -&gt; 勾选“Toolbar”，去掉“Navigation Bar”<br><strong>PS：如果手抖将“Main Menu”给隐藏了，可以在“C:\Users\username.IdeaIC2019.3\config\options\ui.lnf.xml”文件中修改“SHOW_MAIN_MENU”为“true”，并重启 IDEA</strong></li></ul><h3 id="Getter-and-Setter-自动添加注释"><a href="#Getter-and-Setter-自动添加注释" class="headerlink" title="Getter and Setter 自动添加注释"></a>Getter and Setter 自动添加注释</h3><ul><li>alt + insert -&gt; 选择“Getter and Setter”</li><li>Getter Template 和 Setter Template 的默认值都是 Intellij Default，点击后面的“…”</li><li>点击左上角“+”，在弹出框中输入模板名称</li><li>复制默认值里面的代码到新加的模板中，并在开头添加注释模板，最后的代码如下  </li></ul><p><strong>Getter</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* $field.name</span><br><span class="line">*</span><br><span class="line">* @return the $field.name</span><br><span class="line">*/</span><br><span class="line">#if($field.modifierStatic)</span><br><span class="line">static ##</span><br><span class="line">#end</span><br><span class="line">$field.type ##</span><br><span class="line">#set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field, $project))))</span><br><span class="line">#if ($field.boolean &amp;&amp; $field.primitive)</span><br><span class="line">is##</span><br><span class="line">#else</span><br><span class="line">get##</span><br><span class="line">#end</span><br><span class="line">$&#123;name&#125;() &#123;</span><br><span class="line">return $field.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Setter</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param $field.name</span><br><span class="line"> *            the $field.name to set</span><br><span class="line"> */</span><br><span class="line">#set($paramName = $helper.getParamName($field, $project))</span><br><span class="line">#if($field.modifierStatic)</span><br><span class="line">static ##</span><br><span class="line">#end</span><br><span class="line">void set$StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field, $project)))($field.type $paramName) &#123;</span><br><span class="line">  #if ($field.name == $paramName)</span><br><span class="line">    #if (!$field.modifierStatic)</span><br><span class="line">      this.##</span><br><span class="line">    #else</span><br><span class="line">      $classname.##</span><br><span class="line">    #end</span><br><span class="line">  #end</span><br><span class="line">  $field.name = $paramName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此处略去安装等一系列操作等，直接进入正文。&lt;br&gt;本文各项配置均基于 IntelliJ IDEA COMMUNITY 2019.3 版本（社区版足以）。  &lt;img src=&quot;https://tvax2.sinaimg.cn/large/71d67353ly1gbmjx3q
      
    
    </summary>
    
      <category term="进阶篇" scheme="https://jiangdequan.github.io/categories/%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    
    
      <category term="工具" scheme="https://jiangdequan.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IDEA" scheme="https://jiangdequan.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>如何创建随机数？</title>
    <link href="https://jiangdequan.github.io/posts/5e244d22/"/>
    <id>https://jiangdequan.github.io/posts/5e244d22/</id>
    <published>2018-12-24T00:53:16.000Z</published>
    <updated>2020-02-06T08:11:15.003Z</updated>
    
    <content type="html"><![CDATA[<p>如何生成随机数？在多线程场景下如何高效地生成随机数？<br><a id="more"></a></p><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>随机数最重要的特性是它在产生时后面的那个数与前面的那个数毫无关系。<br>真正的随机数是使用物理现象产生的：比如掷钱币、骰子、转轮、使用电子组件的噪音、核裂变等等。这样的随机数生成器叫做物理性随机数生成器，它们的缺点是技术要求比较高。<br>在实际应用中往往使用伪随机数就足够了。这些数列是“似乎”随机的数，实际上它们是通过一个固定的、可以重复的计算方法产生的。它们不真正地随机，因为它们实际上是可以计算出来的，但是它们具有类似于随机数的统计特征。这样的生成器叫做伪随机数生成器。  </p><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>以下示例代码（生成 10 以内的随机整数）包含了常用的生成随机数的用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.youmaycallmev.random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Random RANDOM = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 固定seed的Random */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Random RANDOM_FIXED_SEED = <span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 固定seed的Random */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Random RANDOM_FIXED_SEED2 = <span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        byRandom();</span><br><span class="line">        System.out.println(<span class="string">"cost: "</span> + (System.currentTimeMillis() - start));</span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        byRandomFixedSeed();</span><br><span class="line">        System.out.println(<span class="string">"byRandomFixedSeed cost: "</span> + (System.currentTimeMillis() - start));</span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        byMath();</span><br><span class="line">        System.out.println(<span class="string">"byMath cost: "</span> + (System.currentTimeMillis() - start));</span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        byThreadLocalRandom();</span><br><span class="line">        System.out.println(<span class="string">"byThreadLocalRandom cost: "</span> + (System.currentTimeMillis() - start));</span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        bySecureRandom();</span><br><span class="line">        System.out.println(<span class="string">"bySecureRandom cost: "</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">byRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(RANDOM.nextInt(<span class="number">10</span>) + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">byRandomFixedSeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(RANDOM_FIXED_SEED.nextInt(<span class="number">10</span>) + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(RANDOM_FIXED_SEED2.nextInt(<span class="number">10</span>) + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">byMath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">int</span>) (Math.random() * <span class="number">11</span>) + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">byThreadLocalRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(ThreadLocalRandom.current().nextInt(<span class="number">10</span>) + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bySecureRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SecureRandom secureRandom = <span class="keyword">new</span> SecureRandom();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(secureRandom.nextInt(<span class="number">10</span>) + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1908868734</span><br><span class="line">cost: 1</span><br><span class="line">3030667814</span><br><span class="line">3030667814</span><br><span class="line">byRandomFixedSeed cost: 0</span><br><span class="line">1974918075</span><br><span class="line">byMath cost: 1</span><br><span class="line">9098079760</span><br><span class="line">byThreadLocalRandom cost: 1</span><br><span class="line">4755814549</span><br><span class="line">bySecureRandom cost: 501</span><br></pre></td></tr></table></figure></p><p>通过运行结果我们发现，固定 seed 的为 10 的 Random 生成的随机数是一样的。SecureRandom 生成 10 个随机数需要的时间最长。</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><h3 id="Random-类"><a href="#Random-类" class="headerlink" title="Random 类"></a>Random 类</h3><p>Random 类提供了两个构造方法：一个不带参数的构造方法，一个带 seed 参数的构造方法。默认的构造方法其初始化的源码（解析请看注释）如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 无参构造方法</span><br><span class="line"> */</span><br><span class="line">public Random() &#123;</span><br><span class="line">    // 按位异或运算</span><br><span class="line">    this(seedUniquifier() ^ System.nanoTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用无锁算法产生唯一的种子</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">private static long seedUniquifier() &#123;</span><br><span class="line">    // L&apos;Ecuyer, &quot;Tables of Linear Congruential Generators of</span><br><span class="line">    // Different Sizes and Good Lattice Structure&quot;, 1999</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        // 获取 seedUniquifier 的当前值 current</span><br><span class="line">        long current = seedUniquifier.get();</span><br><span class="line">        // 当前值和 181783497276652981L 进行乘法运算，并得到结果 next</span><br><span class="line">        long next = current * 181783497276652981L;</span><br><span class="line">        // 如果当前值 current 和运算结果 next 不等则修改 seedUniquifier 值为运算结果 next</span><br><span class="line">        if (seedUniquifier.compareAndSet(current, next))</span><br><span class="line">            // 返回种子 next</span><br><span class="line">            return next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 初始值为 8682522807148012L 的 Long 原子类 */</span><br><span class="line">private static final AtomicLong seedUniquifier</span><br><span class="line">    = new AtomicLong(8682522807148012L);</span><br></pre></td></tr></table></figure></p><p>接下来，我们再看看有参数的构造方法源码（解析请看注释）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 带有参数的构造方法</span><br><span class="line"> */</span><br><span class="line">public Random(long seed) &#123;</span><br><span class="line">    // 使用的就是 Random 类</span><br><span class="line">    if (getClass() == Random.class)</span><br><span class="line">        this.seed = new AtomicLong(initialScramble(seed));</span><br><span class="line">    else &#123;</span><br><span class="line">        // subclass might have overriden setSeed（如果使用的是 Random 的子类，有可能重写了 setSeed 方法）</span><br><span class="line">        this.seed = new AtomicLong();</span><br><span class="line">        // 保存 seed</span><br><span class="line">        setSeed(seed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static long initialScramble(long seed) &#123;</span><br><span class="line">    // 先异或再按位与</span><br><span class="line">    return (seed ^ multiplier) &amp; mask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static final long multiplier = 0x5DEECE66DL;</span><br><span class="line"></span><br><span class="line">/** 转换为二进制就是 48 个 1 */</span><br><span class="line">private static final long mask = (1L &lt;&lt; 48) - 1;</span><br></pre></td></tr></table></figure></p><p>然后我们再看看是如何生成随机数的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public int nextInt(int bound) &#123;</span><br><span class="line">    // 如果边界值小于等于 0</span><br><span class="line">    if (bound &lt;= 0)</span><br><span class="line">        // 异常</span><br><span class="line">        throw new IllegalArgumentException(BadBound);</span><br><span class="line">    // 调用 next 方法生成随机数</span><br><span class="line">    int r = next(31);</span><br><span class="line">    // 边界值减去 1</span><br><span class="line">    int m = bound - 1;</span><br><span class="line">    // 如果相与的结果为 0，说明边界值为 2 的幂次方</span><br><span class="line">    if ((bound &amp; m) == 0)  // i.e., bound is a power of 2</span><br><span class="line">        // 重新生成随机数</span><br><span class="line">        r = (int)((bound * (long)r) &gt;&gt; 31);</span><br><span class="line">    else &#123;</span><br><span class="line">        for (int u = r;</span><br><span class="line">             u - (r = u % bound) + m &lt; 0;</span><br><span class="line">             u = next(31))</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected int next(int bits) &#123;</span><br><span class="line">    long oldseed, nextseed;</span><br><span class="line">    AtomicLong seed = this.seed;</span><br><span class="line">    do &#123;</span><br><span class="line">        // 保存原来的 seed</span><br><span class="line">        oldseed = seed.get();</span><br><span class="line">        // 生成新 seed</span><br><span class="line">        nextseed = (oldseed * multiplier + addend) &amp; mask;</span><br><span class="line">    // 无锁算法：比较交换 seed 的值为 nextseed</span><br><span class="line">    &#125; while (!seed.compareAndSet(oldseed, nextseed));</span><br><span class="line">    // 无符号右移 17 位</span><br><span class="line">    return (int)(nextseed &gt;&gt;&gt; (48 - bits));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static final long addend = 0xBL;</span><br></pre></td></tr></table></figure></p><p>通过以上代码的简单分析，我们可以知道随机数的生成是通过一定的算法算出来的，而且和 seed 有非常紧密的关系：算法是固定的，如果 seed 也固定了，就会造成上述测试结果中那样，生成的随机数完全一致的情况。如果能够“预测”seed 的值（默认的 seed 也是通过算法得到的），就有可能生成一样的随机数，说明 Random 类的安全性还有待提升。</p><p>接下来，我们再看看几段 JDK 1.8 官方文档的说明：</p><blockquote><p>An instance of this class is used to generate a stream of pseudorandom numbers. The class uses a 48-bit seed, which is modified using a linear congruential formula. (See Donald Knuth, The Art of Computer Programming, Volume 2, Section 3.2.1.)</p></blockquote><p>该类的实例用于生成伪随机数流。该类使用 48 位种子，使用线性同余公式进行修改。 （参见 Donald Knuth，计算机程序设计的艺术，第 2 卷，第 3.2.1 节。）</p><blockquote><p>If two instances of Random are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers.</p></blockquote><p>如果使用相同的种子创建两个 Random 实例，并且为每个实例创建相同的方法调用序列，则它们将生成并返回相同的数字序列。</p><blockquote><p>Instances of java.util.Random are threadsafe. However, the concurrent use of the same java.util.Random instance across threads may encounter contention and consequent poor performance. Consider instead using java.util.concurrent.ThreadLocalRandom in multithreaded designs.</p></blockquote><p>java.util.Random 的实例是线程安全的。但是，跨线程并发使用相同的 java.util.Random 实例可能会遇到争用，从而导致性能不佳。请考虑在多线程设计中使用 java.util.concurrent.ThreadLocalRandom。<br>PS：这里的竞争，主要还是对 seed 的竞争，在多线程的调用下，next(int bits) 方法中对 seed 的修改并不能一次就修改成功，从而一直循环，直到修改成功。</p><blockquote><p>Instances of java.util.Random are not cryptographically secure. Consider instead using java.security.SecureRandom to get a cryptographically secure pseudo-random number generator for use by security-sensitive applications.</p></blockquote><p>java.util.Random 的实例不具有加密安全性。如果需要，请考虑使用 java.security.SecureRandom 来获取加密安全的伪随机数生成器，以供安全敏感的应用程序使用。</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>我们在上面了解了 Random 类，再来看 Math 工具类就比较简单了。在 Math 类里面有一个如下的私有的静态内部类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static double random() &#123;</span><br><span class="line">    return RandomNumberGeneratorHolder.randomNumberGenerator.nextDouble();</span><br><span class="line">&#125;</span><br><span class="line">private static final class RandomNumberGeneratorHolder &#123;</span><br><span class="line">    static final Random randomNumberGenerator = new Random();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对！里面就是一个静态的类成员变量 Random。生成随机数就是调用 Random 类的 nextDouble 方法。</p><h3 id="ThreadLocalRandom"><a href="#ThreadLocalRandom" class="headerlink" title="ThreadLocalRandom"></a>ThreadLocalRandom</h3><p>ThreadLocalRandom 作为 Random 的子类，重写了 Random 里面的方法，并对并发做了管理和维护，所以在多线程场景下表现比 Random 更好。</p><h3 id="SecureRandom"><a href="#SecureRandom" class="headerlink" title="SecureRandom"></a>SecureRandom</h3><p>SecureRandom 作为 Random 的子类，该类提供加密强随机数生成器，所以在性能上比 Random 就略逊一筹。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>如果没有多线程的场景，那就用 Math 来生成随机数吧，毕竟提供现成的工具类，不用自己维护实例。多线程场景，还是使用 ThreadLocalRandom。如果对安全性有一定要求，可以使用 SecureRandom，那么在性能上有一点点的影响。<br>通过对 Random 源码的部分解析，其中有 3 个彩蛋可以重点记一下：  </p><ol><li>如何生成指定位数全为 1 二进制数？</li><li>如何判断一个数是不是 2 的幂次方？</li><li>什么是无锁算法（CAS）？</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何生成随机数？在多线程场景下如何高效地生成随机数？&lt;br&gt;
    
    </summary>
    
      <category term="基础篇" scheme="https://jiangdequan.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="随机数" scheme="https://jiangdequan.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
      <category term="Random" scheme="https://jiangdequan.github.io/tags/Random/"/>
    
      <category term="Math" scheme="https://jiangdequan.github.io/tags/Math/"/>
    
      <category term="ThreadLocalRandom" scheme="https://jiangdequan.github.io/tags/ThreadLocalRandom/"/>
    
      <category term="SecureRandom" scheme="https://jiangdequan.github.io/tags/SecureRandom/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建一个优雅的开发环境？</title>
    <link href="https://jiangdequan.github.io/posts/f29d8bb0/"/>
    <id>https://jiangdequan.github.io/posts/f29d8bb0/</id>
    <published>2018-11-16T05:13:00.000Z</published>
    <updated>2020-02-06T08:10:15.198Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事，必先利其器。一个顺手的开发环境，对于开发人员是非常有必要的，下面就给大家总结一些提升效率和便捷的工具。<br><a id="more"></a></p><h2 id="Wox"><a href="#Wox" class="headerlink" title="Wox"></a>Wox</h2><p>你还在为满屏幕的应用程序图标而烦恼吗？何不试试 Wox！<br>这里简单给大家介绍下。<a href="https://github.com/Wox-launcher/Wox" target="_blank" rel="noopener">Wox</a> 是一款开源的启动器。用于快速搜索本机安装的各种程序，文件。也可以通过插件快速搜索网络内容，比如今天天气如何，某某电影的评分是多少等等。<br>使用 Wox 后，桌面变得清爽了，几乎不留一个快捷方式。启动应用“Alt + 空格”，输入应用程序名称，回车就可以快速启动应用了。是不是很炫酷，还有其他很多功能和<a href="http://www.wox.one/plugin" target="_blank" rel="noopener">插件</a>，赶紧试试吧！</p><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h2><p>Everything 是一款本地文件搜索的软件，能够在占用极少资源的情况下，快速索引和搜索电脑中的文件。是快速查找文件不可多得的利器。其与 Wox 结合使用，更加的便捷。</p><h2 id="Classic-Shell"><a href="#Classic-Shell" class="headerlink" title="Classic Shell"></a>Classic Shell</h2><p>如果对系统的美观有一定的要求，可以试试这一款开源软件 <a href="https://github.com/coddec/Classic-Shell" target="_blank" rel="noopener">Classic Shell</a>，该软件可以美化任务栏、开始菜单、开始按钮等等界面进行美化。众多的设置项目，总有一款适合你。</p><h2 id="Zeal"><a href="#Zeal" class="headerlink" title="Zeal"></a>Zeal</h2><p>作为程序员，查看 API 文档是学习的最基础操作，众多的文档如何保存和管理呢？这不，<a href="https://github.com/zealdocs/zeal" target="_blank" rel="noopener">Zeal</a> 就是一款开源的跨平台的离线 API 文档查看软件，目前已经支持 194 项文档。不要离开网络和 IDE 就无法编程了，何不试试他呢？</p><h2 id="Hyper"><a href="#Hyper" class="headerlink" title="Hyper"></a>Hyper</h2><p>如果你对 Windows 的 cmd 看厌了，这一款开源的终端工具 <a href="https://github.com/zeit/hyper" target="_blank" rel="noopener">Hyper</a> 一定会让你眼前一亮。该软件需要准备 Nodejs 环境，采用 Web 技术打造的十分漂亮炫酷的跨平台终端工具，同时拥有众多的<a href="https://github.com/bnb/awesome-hyper" target="_blank" rel="noopener">插件</a>供使用，不妨试试！</p><h2 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h2><p>Notepad++ 是一套为自由软件的纯文本编辑器，由侯今吾基于同是开放源代码的 Scintilla 文本编辑组件并独力研发，整个项目起初托管于 SourceForge.net 之上，截止到 2011 年，已被下载超过 2700 万次，并两度获得 SourceForge 社群选择奖——最佳开发工具。2010 年 6 月托管于 TuxFamily，现由 GitHub 托管。<br>该软件以 GPL 发布，有完整的中文化接口及支持多国语言撰写的功能（采用 UTF-8 编码）。它的功能比 Windows 中的记事本（Notepad）强大，除了可以用来制作一般的纯文字的帮助文档，也十分适合用作撰写计算机程序的编辑器。由 6.2.3 版本起，Notepad++ 的文件默认文字格式由 ANSI 改为除去 BOM 的 UTF8（UTF8 without BOM）。Notepad++ 不仅有语法高亮度显示，也有语法折叠功能，并且支持宏以及扩展基本功能的插件。</p><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>（简称VS Code）是一个由微软开发的，同时支持 Windows、Linux 和 macOS 系统且开放源代码的代码编辑器，它支持测试，并内置了 Git 版本控制功能，同时也具有开发环境功能，例如代码补全（类似于 IntelliSense）、代码片段和代码重构等，该编辑器支持用户个人化配置，例如改变主题颜色、键盘快捷方式等各种属性和参数，还在编辑器中内置了<a href="https://marketplace.visualstudio.com/VSCode" target="_blank" rel="noopener">扩展程序</a>管理的功能。</p><h2 id="资源地址"><a href="#资源地址" class="headerlink" title="资源地址"></a>资源地址</h2><ul><li><a href="http://www.wox.one/" target="_blank" rel="noopener">Wox 官网</a></li><li><a href="https://www.voidtools.com/" target="_blank" rel="noopener">Everything 官网</a></li><li><a href="http://www.classicshell.net/" target="_blank" rel="noopener">Classic Shell 官网</a></li><li><a href="https://zealdocs.org/" target="_blank" rel="noopener">Zeal 官网</a></li><li><a href="https://hyper.is/" target="_blank" rel="noopener">Hyper</a></li><li><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a></li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工欲善其事，必先利其器。一个顺手的开发环境，对于开发人员是非常有必要的，下面就给大家总结一些提升效率和便捷的工具。&lt;br&gt;
    
    </summary>
    
      <category term="进阶篇" scheme="https://jiangdequan.github.io/categories/%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    
    
      <category term="工具" scheme="https://jiangdequan.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Wox" scheme="https://jiangdequan.github.io/tags/Wox/"/>
    
      <category term="Everything" scheme="https://jiangdequan.github.io/tags/Everything/"/>
    
      <category term="Zeal" scheme="https://jiangdequan.github.io/tags/Zeal/"/>
    
      <category term="Classic Shell" scheme="https://jiangdequan.github.io/tags/Classic-Shell/"/>
    
      <category term="Hypter" scheme="https://jiangdequan.github.io/tags/Hypter/"/>
    
  </entry>
  
  <entry>
    <title>如何安装 Docker？</title>
    <link href="https://jiangdequan.github.io/posts/66587c06/"/>
    <id>https://jiangdequan.github.io/posts/66587c06/</id>
    <published>2018-11-14T10:19:18.000Z</published>
    <updated>2020-02-06T08:10:46.302Z</updated>
    
    <content type="html"><![CDATA[<p>前前后后安装了多次 Docker，每次都会折腾很久，也会遇到很多问题，在这里简单记录下安装过程以及遇到的问题（在虚拟机中基于 CentOS 7，均在 root 账户下操作）。<br><a id="more"></a></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10，可使用如下指令查看系统内核版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure></p><h2 id="安装所需工具"><a href="#安装所需工具" class="headerlink" title="安装所需工具"></a>安装所需工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h2 id="添加-yum-国内镜像仓库"><a href="#添加-yum-国内镜像仓库" class="headerlink" title="添加 yum 国内镜像仓库"></a>添加 yum 国内镜像仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="更新缓存"><a href="#更新缓存" class="headerlink" title="更新缓存"></a>更新缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><h2 id="启用服务"><a href="#启用服务" class="headerlink" title="启用服务"></a>启用服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="开机自动启动（可选）"><a href="#开机自动启动（可选）" class="headerlink" title="开机自动启动（可选）"></a>开机自动启动（可选）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="添加-Docker-国内镜像"><a href="#添加-Docker-国内镜像" class="headerlink" title="添加 Docker 国内镜像"></a>添加 Docker 国内镜像</h2><p>由于国内网络原因，需要添加国内的镜像仓库，首先使用如下指令编辑该文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></p><p>添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="刷新变化"><a href="#刷新变化" class="headerlink" title="刷新变化"></a>刷新变化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启Docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="配置代理（可选）"><a href="#配置代理（可选）" class="headerlink" title="配置代理（可选）"></a>配置代理（可选）</h2><p>如果你的网络需要配置代理，请执行如下指令</p><h3 id="配置-http-代理"><a href="#配置-http-代理" class="headerlink" title="配置 http 代理"></a>配置 http 代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure><p>添加下面的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service] </span><br><span class="line">Environment=&quot;HTTP_PROXY=http://172.17.17.17:7777&quot; &quot;NO_PROXY=localhost,127.0.0.1,192.168.23.4&quot;</span><br></pre></td></tr></table></figure></p><p><em>NO_PROXY 用来配置不需要使用代理的地址</em></p><h3 id="配置-https-代理"><a href="#配置-https-代理" class="headerlink" title="配置 https 代理"></a>配置 https 代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/docker.service.d/https-proxy.conf</span><br></pre></td></tr></table></figure><p>添加下面的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTPS_PROXY=https://172.17.17.17:7777/&quot; &quot;NO_PROXY=localhost,127.0.0.1,192.168.23.4&quot;</span><br></pre></td></tr></table></figure></p><p><strong>PS：其中的 <em>172.17.17.17:7777</em> 根据实际情况进行修改，如果代理不支持 HTTPS 的话，需要把 <em><a href="https://172.17.17.17:7777/" target="_blank" rel="noopener">https://172.17.17.17:7777/</a></em> 中的 https 改成 http，否则回报 tls 的错误</strong></p><h2 id="配置-bip"><a href="#配置-bip" class="headerlink" title="配置 bip"></a>配置 bip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;bip&quot;: &quot;192.168.2.23/24&quot;</span><br></pre></td></tr></table></figure></p><p><strong>PS：修改的网段不要和虚拟机 IP，代理在同一网段，否则可能导致 SSH 无法连接虚拟机或者 Docker 无法上网等问题</strong></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="VBox-无界面启动-CentOS"><a href="#VBox-无界面启动-CentOS" class="headerlink" title="VBox 无界面启动 CentOS"></a>VBox 无界面启动 CentOS</h3><p>将以下指令保存为 bat 格式文件，双击即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@D:</span><br><span class="line">@cd D:\Program Files\Oracle\VirtualBox</span><br><span class="line">VBoxManage.exe startvm &quot;Centos7&quot; --type headless</span><br></pre></td></tr></table></figure></p><p>如果要关闭虚拟机，则采用如下的脚本即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@D:</span><br><span class="line">@cd D:\Program Files\Oracle\VirtualBox</span><br><span class="line">VBoxManage.exe controlvm &quot;Centos7&quot; poweroff</span><br></pre></td></tr></table></figure></p><p><strong>PS：其中 <em>D:\Program Files\Oracle\VirtualBox</em> 为 VBox 的安装目录，<em>Centos7</em> 为你需要启动的虚拟机名称</strong></p><h3 id="关闭-CentOS-7-的防火墙"><a href="#关闭-CentOS-7-的防火墙" class="headerlink" title="关闭 CentOS 7 的防火墙"></a>关闭 CentOS 7 的防火墙</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 停止 firewall</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"># 禁止 firewall 开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p><strong>PS：由于是折腾用的虚拟机，无需使用防火墙，索性关闭了，避免其他问题</strong></p><h3 id="SSH-无法连接虚拟机"><a href="#SSH-无法连接虚拟机" class="headerlink" title="SSH 无法连接虚拟机"></a>SSH 无法连接虚拟机</h3><p>首先使用如下指令查看虚拟机的 IP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure></p><p>我们会得到以下信息，其中第二项（enp0s3，每个虚拟机网卡可能不太一样，这个值也不同）没有 inet 属性，导致无法连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 08:00:27:08:9a:58 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN</span><br><span class="line">    link/ether 02:42:02:3d:70:d4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.2.23/24 brd 192.168.2.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></p><p>接下来我们使用如下指令修改该网卡的配置（CentOS 7 默认不启动网卡）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br></pre></td></tr></table></figure></p><p>将其中的 <strong>ONBOOT=no</strong> 修改为 <strong>ONBOOT=yes</strong>，重启网络服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></p><p>再次使用 <em>ip addr</em> 查看 IP 地址信息，发现已经分配了 IP 地址信息了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 08:00:27:08:9a:58 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic enp0s3</span><br><span class="line">       valid_lft 86372sec preferred_lft 86372sec</span><br><span class="line">    inet6 fe80::9607:7c22:4201:a0dc/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN</span><br><span class="line">    link/ether 02:42:02:3d:70:d4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.2.23/24 brd 192.168.2.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></p><p>然后，再次使用 SSH 进行连接，发现可以连接使用了，就是连接有点慢</p><h3 id="SSH-连接慢"><a href="#SSH-连接慢" class="headerlink" title="SSH 连接慢"></a>SSH 连接慢</h3><p>使用如下指令修改 SSHD 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></p><p>关闭DNS反向解析，修改 <em>UseDNS=no</em>，配置是注释掉的，但是其默认值是 yes<br>关闭 SERVER上 的 GSS 认证，修改 <em>GSSAPIAuthentication no</em></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://blog.csdn.net/doiido/article/details/43793391" target="_blank" rel="noopener">CentOS/Linux 解决 SSH 连接慢</a></li><li><a href="https://blog.csdn.net/dancheren/article/details/73611878" target="_blank" rel="noopener">查看虚拟机里的Centos7的IP</a></li><li><a href="http://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noopener">CentOS Docker 安装</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前前后后安装了多次 Docker，每次都会折腾很久，也会遇到很多问题，在这里简单记录下安装过程以及遇到的问题（在虚拟机中基于 CentOS 7，均在 root 账户下操作）。&lt;br&gt;
    
    </summary>
    
      <category term="架构篇" scheme="https://jiangdequan.github.io/categories/%E6%9E%B6%E6%9E%84%E7%AF%87/"/>
    
    
      <category term="微服务" scheme="https://jiangdequan.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Docker" scheme="https://jiangdequan.github.io/tags/Docker/"/>
    
      <category term="SSH" scheme="https://jiangdequan.github.io/tags/SSH/"/>
    
      <category term="代理" scheme="https://jiangdequan.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="CentOS 7" scheme="https://jiangdequan.github.io/tags/CentOS-7/"/>
    
  </entry>
  
  <entry>
    <title>什么是微服务？</title>
    <link href="https://jiangdequan.github.io/posts/8b0d9e7/"/>
    <id>https://jiangdequan.github.io/posts/8b0d9e7/</id>
    <published>2018-10-31T10:19:18.000Z</published>
    <updated>2020-02-06T08:09:44.390Z</updated>
    
    <content type="html"><![CDATA[<p>贯穿微服务的核心思想是：当某些类型的应用程序被拆分为可以协同工作的、较小的、可组合的模块时，它们变得更加容易构建和维护。每个组件都是持续开发和单独维护的，这样整个应用程序就是由其它组件组合而成。这与传统的“单体”应用形成鲜明地对比，后者将所有的功能全部都融合在一个应用当中。<br><a id="more"></a><br>用一系列模块化的组件来构建应用更易于理解和测试，而且最重要的是在应用的整个生命周期中更易于维护。它使得公司或者组织能够实现更高的灵活性，并能够大大缩短开发、测试、投产等所需的时间。事实证明，这种方法更加出色，特别是对于由地理和文化多样化的开发人员团队开发的大型企业应用。  </p><p>微服务还有其他一些好处：</p><ul><li><strong>开发人员独立性</strong>：小型团队并行工作，并且可以比大型团队更快地迭代。 </li><li><strong>隔离和弹性</strong>：如果一个组件死了，你可以旋转另一个组件，然后应用程序的其余部分继续运行。 </li><li><strong>可扩展性</strong>：较小的组件占用较少的资源，并且可以进行扩展以仅满足该组件不断增长的需求。 </li><li><strong>生命周期自动化</strong>：单个组件更易于适应连续交付管道和复杂的部署方案，而单体应用则无法实现。 </li><li><strong>与业务的关系</strong>：微服务架构在业务领域边界上分开，增加了整个组织的独立性和理解。  </li></ul><p>微服务的通用定义通常依赖于提供API端点的每个微服务，通常但不总是无状态REST API，可以通过HTTP（S）访问，就像标准网页一样。这种访问微服务的方法使开发人员可以轻松地使用它们，因为它们只需要大多数开发人员已经熟悉的开发工具和方法。</p><h2 id="微服务是一个新概念吗？"><a href="#微服务是一个新概念吗？" class="headerlink" title="微服务是一个新概念吗？"></a>微服务是一个新概念吗？</h2><p>将应用拆分成若干更小组件的思想并不新鲜了。已经有其他编程的范例使用了和微服务相同的理念，例如面向服务的架构（SOA）。然而，随着前沿科技的进步加上对集成的“数字体验”的期望越来越高，已经产生了用于满足现代商业应用需求的新型开发工具和技术。  </p><p>微服务不仅取决于为支持这一概念而设立的技术，还取决于具有文化，技术诀窍和结构的组织，以便开发团队能够采用此模型。微服务是IT部门向DevOps文化转变的一部分，其中开发和运营团队紧密合作，在其生命周期内支持应用程序，并经历快速甚至连续的发布周期，而不是更传统的长周期。 </p><h2 id="为什么开源对于微服务很重要？"><a href="#为什么开源对于微服务很重要？" class="headerlink" title="为什么开源对于微服务很重要？"></a>为什么开源对于微服务很重要？</h2><p>当您从一开始就将应用程序设计为模块化和可组合时，它允许您在许多地方使用插入式组件，在过去您可能需要一些专有的解决方案，这可能是因为组件的证书限制或特殊使用要求。许多应用程序组件都能够找到现成的开源工具，并且有无数的开源项目可以实现微服务架构的各种不同的要求，例如身份验证，服务发现，日志记录和监视，负载平衡，扩展等等。</p><p>专注于微服务可以使开发人员更加容易的为您的应用提供可选择的接口。当所有服务都是API时，应用组件之间的通信就变得标准化。所有的组件都必须通过这些标准的API来使用该应用和数据进行权限校验和通信。这样就使得组织内外部的开发人员更加容易地创造新的方式来使用应用数据和服务。</p><h2 id="容器技术从何而来？"><a href="#容器技术从何而来？" class="headerlink" title="容器技术从何而来？"></a>容器技术从何而来？</h2><p>轻量级操作系统容器的现代化概念是在21世纪早期作为 FreeBSD 项目的一部分而被引入的。Docker 为创建和共享容器映像提供了改进的用户体验，因此从 2013 年开始被大量采用。容器非常适合微服务，符合轻量级和灵活组件的需求，同时也易于管理和动态替换。不同于虚拟机，容器被设计为运行容器所需的最小组件，而不是将多个功能打包到同一虚拟或物理机器中。Docker 和类似工具提供的易开发性有助于快速开发和测试服务。</p><p>当然，容器只是一种工具，微服务架构只是一个概念。在不使用容器的情况下，完全可以构建一个微服务应用程序，就像在容器内构建更传统的应用程序一样。也许利用容器来组织这些功能，会显得更加合理。</p><h2 id="如何协调微服务？"><a href="#如何协调微服务？" class="headerlink" title="如何协调微服务？"></a>如何协调微服务？</h2><p>为了在生产中运行微服务应用，您需要能够监控、管理和扩展不同的组成部分。到目前为止，已经有许多不同的工具可以帮助你实现这一目标。就容器而言，诸如 <a href="http://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a> 类似的开源工具，将有可能成为你解决方案中的一部分。或者，对于应用中非容器的部分，可以使用其他工具来管理这些组件：例如，在 <a href="https://opensource.com/resources/what-is-openstack" target="_blank" rel="noopener">OpenStack</a> 云上，你可以使用 Heat 来管理应用程序组件。</p><p>另一个选择是使用平台即服务（PaaS，Platform as a Service）工具，它允许开发人员专注于编写代码，通过抽象一些底层管理技术，并允许他们轻松地为应用程序的某些部分选择现成的开源组件。像数据库存储引擎，日志记录服务，持续集成服务器，Web 服务器或其他组件。一些 PaaS 系统（如OpenShift）直接使用 Docker 和 Kubernetes 等上游项目来管理应用程序组件，而其他一些系统则尝试自行重新实现管理工具。</p><h2 id="现有应用程序怎么样？"><a href="#现有应用程序怎么样？" class="headerlink" title="现有应用程序怎么样？"></a>现有应用程序怎么样？</h2><p>虽然使用微服务可能是公司未来 IT 战略的重要组成部分，但肯定有许多应用程序不符合这种模式，也不可能在一夜之间重新构建这些应用程序以满足微服务这种新架构风格。迁移到微服务架构存在文化和技术成本，但幸运的是，微服务和传统应用程序可以在相同的环境中协同工作，前提是公司具有可靠的双模 IT 策略。</p><h2 id="在哪里可以了解更多？"><a href="#在哪里可以了解更多？" class="headerlink" title="在哪里可以了解更多？"></a>在哪里可以了解更多？</h2><ul><li><a href="https://opensource.com/business/14/12/containers-microservices-and-orchestrating-whole-symphony" target="_blank" rel="noopener">Containers, microservices, and orchestrating the whole symphony by Uri Cohen</a></li><li><a href="https://opensource.com/bus/15/3/google-grpc-open-source-remote-procedure-calls" target="_blank" rel="noopener">Google shares gRPC as alternative to REST for microservices by Luis Ibáñez</a></li><li><a href="https://opensource.com/business/15/2/interview-sarah-novotny-nginx" target="_blank" rel="noopener">NGINX: The secret heart of the modern web by Jason Hibbets</a></li><li><a href="https://opensource.com/business/15/5/api-integrations-with-python-and-zato" target="_blank" rel="noopener">Smart API integrations with Python and Zato by Dariusz Suchojad</a></li><li><a href="https://opensource.com/business/14/7/interview-jerome-petazzoni-docker" target="_blank" rel="noopener">Senior software engineer Petazzoni on the breathtaking growth of Docker by Richard Morrell</a></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://opensource.com/resources/what-are-microservices" target="_blank" rel="noopener">What are microservices?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;贯穿微服务的核心思想是：当某些类型的应用程序被拆分为可以协同工作的、较小的、可组合的模块时，它们变得更加容易构建和维护。每个组件都是持续开发和单独维护的，这样整个应用程序就是由其它组件组合而成。这与传统的“单体”应用形成鲜明地对比，后者将所有的功能全部都融合在一个应用当中。&lt;br&gt;
    
    </summary>
    
      <category term="架构篇" scheme="https://jiangdequan.github.io/categories/%E6%9E%B6%E6%9E%84%E7%AF%87/"/>
    
    
      <category term="微服务" scheme="https://jiangdequan.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="开源" scheme="https://jiangdequan.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="容器" scheme="https://jiangdequan.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="SOA" scheme="https://jiangdequan.github.io/tags/SOA/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 中集成 logback</title>
    <link href="https://jiangdequan.github.io/posts/94103dca/"/>
    <id>https://jiangdequan.github.io/posts/94103dca/</id>
    <published>2017-09-22T05:13:00.000Z</published>
    <updated>2020-02-06T08:09:16.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着 Tomcat 长时间的运行，在其 logs 下面会产生大量的日志文件，但是 Tomcat 本身并未提供日志清理的功能，在一定时间后会占用一定的系统资源，而且该目录下的日志文件并不是十分重要，所以需要一种机制在一定的时机对日志文件进行管理。<br><a id="more"></a></p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="脚本-定时任务"><a href="#脚本-定时任务" class="headerlink" title="脚本 + 定时任务"></a>脚本 + 定时任务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">echo " " &gt; /data/tomcat/logs/catalina.out</span><br><span class="line">find /the/path/of/logs/ -type f -name "*.log" -mtime +7 -delete</span><br><span class="line">find /the/path/of/logs/ -type f -name "localhost_*.txt" -mtime +7 -delete</span><br></pre></td></tr></table></figure><p>以上是一个简单的 shell 命令，删除7天前的日志文件，将其保存到 clean_tomcat_log.sh，执行 crontab -e 编辑添加该脚本到定时任务。</p><h3 id="logrotate"><a href="#logrotate" class="headerlink" title="logrotate"></a>logrotate</h3><p>Logrotate 是 Linux 自带的一个命令工具，一般的服务器都默认安装有。通过简单的配置就可以实现上述脚本的功能，而且还能够保存分割日志。<br>在 /etc/logrotate.d/ 目录下添加 tomcat-logs 配置文件，文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/the/path/of/logs/*.log /the/path/of/logs/*.txt &#123;</span><br><span class="line">    hourly    --每天执行,可供选择的有weekly,monthly,yearly</span><br><span class="line">　　rotate 0  --不会保留分割的文件,会立即删除</span><br><span class="line">　　missingok  --如果有错误也继续</span><br><span class="line">　　notifempty  --为空则不进行分割</span><br><span class="line">　　copytruncate  --分割时复制原日志内容到新的备份文件中,保持原日志文件继续滚动,由于复制会有一定的时间差,可能会造成部分日志丢失</span><br><span class="line">　　prerotate</span><br><span class="line">　　    find /the/path/of/logs/ -type f -mtime +30 -print -delete;  --删除30天前文件内容有改动的文件</span><br><span class="line">　　endscript</span><br><span class="line">　　postrotate</span><br><span class="line">　　　　find /the/path/of/logs/ -type f -name &quot;*.1&quot; -print -delete;  --删除备份的日志文件</span><br><span class="line">　　endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上配置可以简单的实现如何管理日志文件，logrotate 还有其他参数，以上只是一个简单的例子。</p><h3 id="tomcat-slf4j-logback"><a href="#tomcat-slf4j-logback" class="headerlink" title="tomcat-slf4j-logback"></a>tomcat-slf4j-logback</h3><p>该方案通过 Tomcat 结合 logback 可以对 logs 下的日志文件进行管理，这里也推荐使用此方案。</p><ol><li>首先从官网 [1] 下载 Tomcat 对应版本的文件；</li><li>将下载的文件替换到 Tomcat 对应目录下，如果没有其他特殊需求，这样就可以发布项目启动Tomcat了；<br> 复制 bin/tomcat-juli.jar 到 $CATALINA_HOME/bin 替换已有的 tomcat-juli.jar<br> 复制 bin/setenv.sh 或者 bin\setenv.bat 到 $CATALINA_HOME/bin 替换已有的 setenv.sh/setenv.bat 脚本（如果 setenv.sh/setenv.bat 脚本有其他自定义参数的设置则只能在源文件基础上进行修改）<br> 复制 conf/logback.xml 到 $CATALINA_HOME/conf<br> 复制 conf/logback-access.xml 到 $CATALINA_HOME/conf（之前老一点的版本是logback-access-localhost.xml）<br> 复制 conf/server.xml 到 $CATALINA_HOME/conf（如果 server.xml 文件有其他内容修改，则需要在源文件上进行修改）<br> 复制 lib/logback-core-1.1.8.jar，lib/logback-access-1.1.8.jar 到 $CATALINA_HOME/lib（如果发布项目也使用了 logback 需要注意统一版本号，以免造成冲突等问题）  </li><li>删除 $CATALINA_HOME/conf/logging.properties 文件。以完全关闭 java.util.logging。</li><li><p>如果需要手动修改 server.xml 则需要按照以下步骤进行修改：<br> 如果需要添加自定义的配置 logback-access-localhost.xml 则要添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;ch.qos.logback.access.tomcat.LogbackValve&quot; quiet=&quot;true&quot; filename=&quot;$&#123;catalina.home&#125;/conf/logback-access-localhost.xml&quot; /&gt;</span><br></pre></td></tr></table></figure><p> PS：如果使用 1.1.7 以上版本的 logback，<code>${catalina.home}</code> 可以去掉<br> 如果使用默认的 logback-access.xml 配置文件则添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;ch.qos.logback.access.tomcat.LogbackValve&quot; quiet=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure><p> 删除以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ol><p>至此整个配置过程就结束了，接下来就发布项目，启动 Tomcat 进行测试了。其他一些日志的管理只需要修改 conf/ 下的 logback 配置文件即可。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>[1] <a href="https://github.com/tomcat-slf4j-logback/tomcat-slf4j-logback" target="_blank" rel="noopener">tomcat-slf4j-logback</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;随着 Tomcat 长时间的运行，在其 logs 下面会产生大量的日志文件，但是 Tomcat 本身并未提供日志清理的功能，在一定时间后会占用一定的系统资源，而且该目录下的日志文件并不是十分重要，所以需要一种机制在一定的时机对日志文件进行管理。&lt;br&gt;
    
    </summary>
    
      <category term="进阶篇" scheme="https://jiangdequan.github.io/categories/%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    
    
      <category term="应用服务器" scheme="https://jiangdequan.github.io/tags/%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="tomcat" scheme="https://jiangdequan.github.io/tags/tomcat/"/>
    
      <category term="logback" scheme="https://jiangdequan.github.io/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 7 下如何删除路径过长的文件？</title>
    <link href="https://jiangdequan.github.io/posts/f05c72d4/"/>
    <id>https://jiangdequan.github.io/posts/f05c72d4/</id>
    <published>2017-08-28T05:13:00.000Z</published>
    <updated>2020-02-06T08:08:38.978Z</updated>
    
    <content type="html"><![CDATA[<p>作为程序员，在编写BUG的过程中，时不时会遇到自己或者队友挖的坑，程序生成了路径过深的文件，导致无法删除。下面介绍一个指令，可以用来填坑！<br><a id="more"></a></p><h2 id="robocopy"><a href="#robocopy" class="headerlink" title="robocopy"></a>robocopy</h2><p>一个复制文件数据的命令行工具，在 Windows 7 中已经集成了。关于 robocopy 的跟多介绍 <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/robocopy" target="_blank" rel="noopener">点击这里</a>，我就不提供翻译了服务了。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">robocopy empty_dir will_delete_dir /purge</span><br></pre></td></tr></table></figure><p>只需要在要删除的文件的同级目录下执行上述指令即可删除顽固的文件。其中 <strong>empty_dir</strong> 指新建的空白目录，<strong>will_delete_dir</strong> 指要删除的目录。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为程序员，在编写BUG的过程中，时不时会遇到自己或者队友挖的坑，程序生成了路径过深的文件，导致无法删除。下面介绍一个指令，可以用来填坑！&lt;br&gt;
    
    </summary>
    
      <category term="高级篇" scheme="https://jiangdequan.github.io/categories/%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    
    
      <category term="操作系统" scheme="https://jiangdequan.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="robocopy" scheme="https://jiangdequan.github.io/tags/robocopy/"/>
    
      <category term="路径过长" scheme="https://jiangdequan.github.io/tags/%E8%B7%AF%E5%BE%84%E8%BF%87%E9%95%BF/"/>
    
      <category term="删除" scheme="https://jiangdequan.github.io/tags/%E5%88%A0%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建一个自己的博客</title>
    <link href="https://jiangdequan.github.io/posts/25857550/"/>
    <id>https://jiangdequan.github.io/posts/25857550/</id>
    <published>2016-11-17T14:13:00.000Z</published>
    <updated>2020-02-06T08:07:53.491Z</updated>
    
    <content type="html"><![CDATA[<p>好记性不如烂笔头。作为一个程序员，有一个博客记录学习的过程十分必要。特此记录下搭建博客的过程。<br><a id="more"></a></p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><blockquote><p>A fast, simple &amp; powerful blog framework. You write posts in <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a> (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p></blockquote><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a>有比较详细的说明，包括Hexo的介绍如何安装，API，插件，主题等</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>这里简单介绍下 windows 下如何安装 Hexo</p><ul><li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>以上两个程序到官网选择 windows 对应版本下载直接安装即可，安装成功后，执行以下命令安装 Hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果安装太慢或者无法安装，可以切换到国内镜像<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a>，安装完成执行以下命令查看是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>回车之后会显示相应的版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo-cli: 1.0.2</span><br><span class="line">os: Windows_NT 6.1.7601 win32 x64</span><br><span class="line">http_parser: 2.5.2</span><br><span class="line">node: 4.4.7</span><br><span class="line">v8: 4.5.103.36</span><br><span class="line">uv: 1.8.0</span><br><span class="line">zlib: 1.2.8</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">icu: 56.1</span><br><span class="line">modules: 46</span><br><span class="line">openssl: 1.0.2h</span><br></pre></td></tr></table></figure><h3 id="开始博客之旅"><a href="#开始博客之旅" class="headerlink" title="开始博客之旅"></a>开始博客之旅</h3><p>创建一个默认的博客目录，这里我以 temp 为文件名做为实例，temp 可根据喜好进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init temp</span><br><span class="line">$ cd temp</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>通过以上几步，一个默认模板的博客就创建好了，现在开始访问下吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>只要端口没有被占用就可以通过 localhost:4000 进行访问了，当然也可以指定一个你喜欢的端口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 8888</span><br></pre></td></tr></table></figure><h3 id="主题使用"><a href="#主题使用" class="headerlink" title="主题使用"></a>主题使用</h3><p>接下来开始为博客添加各式各样的主题吧，你也可以综合各主题的优势进行整合，这里只介绍如何使用其中一款主题。Hexo 官网提供了 60+ 款主题可随意挑选，找到主题GitHub 地址，后续会用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd temp</span><br><span class="line">$ git clone https://github.com/DrakeLeung/hexo-theme-again.git themes/xxx</span><br></pre></td></tr></table></figure><p>说明 <em><a href="https://github.com/DrakeLeung/hexo-theme-again.git" target="_blank" rel="noopener">https://github.com/DrakeLeung/hexo-theme-again.git</a></em> 地址为博客主题 GitHub 地址，<em>xxx</em> 根据自己而定，后面会用到。</p><p>编辑博客根目录下的 <em>_config.yml</em> 文件应用主题，一般主题都有使用说明的，而且每个主题的使用方式也不一样，这里就不再赘述了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: xxx</span><br></pre></td></tr></table></figure><h3 id="发布到-GitHub"><a href="#发布到-GitHub" class="headerlink" title="发布到 GitHub"></a>发布到 GitHub</h3><p>Hexo 也提供了各种各样的发布插件，这里以 <em>hexo-deployer-git</em> 为例作为讲解。</p><p>编辑根目录下 package.json，添加发布插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;hexo-deployer-git&quot;: &quot;^0.2.0&quot;</span><br></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>或者不使用以上方法，直接执行以下命令进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装好之后配置根目录下 _config.yml 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https://github.com/yourgithub/yourgithub.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>开始发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>完成上述一系列工作之后，后面只需要在 <em>source/_posts/</em> 下编写 md 文件就可以了，发布参照上一步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好记性不如烂笔头。作为一个程序员，有一个博客记录学习的过程十分必要。特此记录下搭建博客的过程。&lt;br&gt;
    
    </summary>
    
      <category term="扩展篇" scheme="https://jiangdequan.github.io/categories/%E6%89%A9%E5%B1%95%E7%AF%87/"/>
    
    
      <category term="博客" scheme="https://jiangdequan.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://jiangdequan.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>三星 Note 3（SM-N9009）ROM 汇总</title>
    <link href="https://jiangdequan.github.io/posts/3bc43dd6/"/>
    <id>https://jiangdequan.github.io/posts/3bc43dd6/</id>
    <published>2016-01-01T13:59:42.000Z</published>
    <updated>2020-02-06T08:05:53.464Z</updated>
    
    <content type="html"><![CDATA[<p>博客升级了，原来的文章被清理了，暂时把原来的 ROM 整理了下！大家凑合刷刷吧，毕竟都好几年的机子了！<br><a id="more"></a></p><h2 id="ROM-列表"><a href="#ROM-列表" class="headerlink" title="ROM 列表"></a>ROM 列表</h2><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">安卓版本</th><th style="text-align:center">系统名称</th><th style="text-align:center">双卡</th><th style="text-align:center">Patchrom</th><th style="text-align:center">自编译内核</th><th style="text-align:center">下载地址</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">KitKat(4.4)</td><td style="text-align:center">TOS</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center"><a href="http://rom.7to.cn/romdetail/1012423" target="_blank" rel="noopener">下载地址</a></td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">KitKat(4.4)</td><td style="text-align:center">MIUI7</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center"><a href="https://pan.baidu.com/s/1N69VxPfvgSJFQwsLeYSdgw" target="_blank" rel="noopener">下载地址 提取码: cpxc</a></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Lollipop(5.0)</td><td style="text-align:center">FlymeOS4.5</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center"><a href="http://rom.7to.cn/romdetail/1017559" target="_blank" rel="noopener">下载地址</a></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Lollipop(5.1)</td><td style="text-align:center">CyanogenMod 12.1</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center"><a href="http://rom.7to.cn/romdetail/1017053" target="_blank" rel="noopener">下载地址</a></td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">Lollipop(5.1)</td><td style="text-align:center">Phronesis Rom v6.5 Feature Rich</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center"><a href="">下载地址</a></td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">Lollipop(5.1)</td><td style="text-align:center">FlymeOS5</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"><a href="http://rom.7to.cn/romdetail/1015120" target="_blank" rel="noopener">下载地址</a></td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">Marshmallow(6.0)</td><td style="text-align:center">CyanogenMod 13(trader418)</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center"><a href="http://rom.7to.cn/romdetail/1018794" target="_blank" rel="noopener">下载地址</a></td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">Marshmallow(6.0)</td><td style="text-align:center">CyanogenMod 13(christer12)</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center"><a href="http://rom.7to.cn/romdetail/1023018" target="_blank" rel="noopener">下载地址</a></td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">Marshmallow(6.0)</td><td style="text-align:center">ResurrectionRemix</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center"><a href="http://rom.7to.cn/romdetail/1023019" target="_blank" rel="noopener">下载地址</a></td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">Marshmallow(6.0)</td><td style="text-align:center">MIUI8</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"><a href="https://pan.baidu.com/s/16rEXlybtEyJubFUULZoyWA" target="_blank" rel="noopener">下载地址 提取码: ivhm</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客升级了，原来的文章被清理了，暂时把原来的 ROM 整理了下！大家凑合刷刷吧，毕竟都好几年的机子了！&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="https://jiangdequan.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Rom" scheme="https://jiangdequan.github.io/tags/Rom/"/>
    
      <category term="LineageOS" scheme="https://jiangdequan.github.io/tags/LineageOS/"/>
    
      <category term="CM" scheme="https://jiangdequan.github.io/tags/CM/"/>
    
      <category term="FlymeOS" scheme="https://jiangdequan.github.io/tags/FlymeOS/"/>
    
      <category term="MIUI" scheme="https://jiangdequan.github.io/tags/MIUI/"/>
    
  </entry>
  
</feed>
